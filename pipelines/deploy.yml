trigger:
  branches:
    include:
    - main

pool:
  vmImage: "ubuntu-latest"

parameters:
  - name: tfVersion
    displayName: Terraform version
    type: string
    default: 1.3.9
  - name: tfPlanOnly
    displayName: Run Terraform plan only
    type: boolean
    default: false # run only Terraform plan (without applying changes)
  - name: updateSecrets
    displayName: Update Secrets in KeyVault
    type: boolean
    default: false

stages:
  - template: deploy-steps.yml
    parameters:
      environment: Dev
      envEnabled: false
      tfVersion: ${{ parameters.tfVersion }}
      serviceConnectionName: sc-default
      rsgName: rg-sample-containerapp-dev
      stgName: devsamplepacstf
      tfvarsName: dev.tfvars
      tfPlanOnly: ${{ parameters.tfPlanOnly }}
      tfDirName: "terraform"
      webAppComponentName: acsapp
      updateSecrets: ${{ parameters.updateSecrets }}

  - template: deploy-steps.yml
    parameters:
      environment: NonProd
      envEnabled: true
      tfVersion: ${{ parameters.tfVersion }}
      serviceConnectionName: sc-default
      rsgName: rg-sample-containerapp-np
      stgName: nonprodsamplepacstf
      tfvarsName: nonprod.tfvars
      tfPlanOnly: ${{ parameters.tfPlanOnly }}
      tfDirName: "terraform"
      webAppComponentName: acsapp
      updateSecrets: ${{ parameters.updateSecrets }}

  - template: deploy-steps.yml
    parameters:
      environment: Prod
      envEnabled: false
      tfVersion: ${{ parameters.tfVersion }}
      serviceConnectionName: sc-default
      rsgName: rg-sample-containerapp-prod
      stgName: prodsamplepacstf
      tfvarsName: prod.tfvars
      tfPlanOnly: ${{ parameters.tfPlanOnly }}
      tfDirName: "terraform"
      webAppComponentName: acsapp
      updateSecrets: ${{ parameters.updateSecrets }}